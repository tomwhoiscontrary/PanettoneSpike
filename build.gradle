buildscript {
	ext {
		springBootVersion = '1.2.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath (group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: springBootVersion)
		classpath (group: 'br.com.caelum.vraptor', name: 'vraptor-panettone', version: '4.0.0-RC8')
	}
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'spring-boot'
apply plugin: 'eclipse'

version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile (group: 'org.springframework.boot', name: 'spring-boot-starter-web')

	providedRuntime (group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat')

	testCompile (group: 'org.springframework.boot', name: 'spring-boot-starter-test')
}

sourceSets {
	main {
		java {
			srcDir 'build/view-classes'
		}
	}
}
compileJava.dependsOn 'generateTemplates'

eclipse {
	classpath {
		containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
		defaultOutputDir = file('.eclipse')
	}
}

task generateTemplates << {
	def sourceDir = file('src/main/views')
	def outputDir = file('build/view-classes')
	def compiler = new br.com.caelum.vraptor.panettone.Compiler(sourceDir, outputDir, [], new br.com.caelum.vraptor.panettone.mini.MiniListener())
	compiler.compileAll();
}

task cfPush(type: Exec) {
	executable 'cf'
	args 'push', '-p', configurations.archives.allArtifacts.files.singleFile
}
cfPush.dependsOn assemble
